// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String        @id @default(cuid())
  name            String?
  username        String?       @unique
  password        String?
  email           String        @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  githubId        String?
  discordId       String?
  discordVerified DateTime?
  accounts        Account[]
  sessions        Session[]
  UserRole        UserRole[]
  Request         Request[]
  comment         comment[]
  UserAnswer      UserAnswer[]
  Course          Course[]
  Interaction     Interaction[]
  Team            Team[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String
  githubRepo  String
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  teamId      String    @unique
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  comment     comment[]
}

model comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userEmail String
  ProjectId String
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  project   Project  @relation(fields: [ProjectId], references: [id], onDelete: Cascade)

  @@index([ProjectId])
}

model Team {
  id        String @id @default(cuid())
  creatorId String

  creator User      @relation(fields: [creatorId], references: [id])
  Project Project[]
  Role    Role[]
}

enum roleName {
  FRONTEND
  BACKEND
  DESIGN
  SENIOR
}

model Role {
  id        String     @id @default(cuid())
  roleName  roleName
  stack     String
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  UserRole  UserRole[]
  Request   Request[]
  Course    Course[]

  @@unique([roleName, teamId])
  @@index([teamId])
}

model Request {
  id         String   @id @default(cuid())
  userEmail  String
  user       User     @relation(fields: [userEmail], references: [id])
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model UserRole {
  roleId    String
  role      Role    @relation(fields: [roleId], references: [id])
  userEmail String
  user      User    @relation(fields: [userEmail], references: [id])
  isAdmin   Boolean @default(false)

  @@unique([roleId, userEmail])
  @@index([roleId])
}

model UserAnswer {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  flashcardId String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  answer      String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model Flashcard {
  id         String       @id @default(cuid())
  languageId String
  language   Language     @relation(fields: [languageId], references: [id])
  answer     String
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  UserAnswer UserAnswer[]
}

model Language {
  id             String           @id @default(cuid())
  languageName   String           @unique
  Flashcard      Flashcard[]
  LanguageCourse LanguageCourse[]
}

model Course {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  roleId         String
  role           Role             @relation(fields: [roleId], references: [id])
  isAccepted     DateTime
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  LanguageCourse LanguageCourse[]
  Interaction    Interaction[]
}

model LanguageCourse {
  languageId String
  language   Language @relation(fields: [languageId], references: [id])
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])

  @@unique([courseId])
}

model Interaction {
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  visitorId String
  visitor   User     @relation(fields: [visitorId], references: [id])
  liked     Boolean  @default(false)
  playCount Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@unique([courseId])
}

model VerificationToken {
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
