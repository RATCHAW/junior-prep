// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum roleName {
  FRONTEND
  BACKEND
  DESIGN
  SENIOR
}

enum provider {
  LOCAL
  GITHUB
}

enum userResponse {
  again
  hard
  good
  easy
}

model User {
  id              String        @id @default(cuid())
  name            String?
  username        String?       @unique
  password        String?
  email           String        @unique
  provider        provider
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  githubId        String?
  discordId       String?
  discordVerified DateTime?
  UserRole        UserRole[]
  Request         Request[]
  comment         comment[]
  UserAnswer      UserAnswer[]
  Course          Course[]
  Interaction     Interaction[]
  Team            Team[]
  TimeSpent       TimeSpent[]

  @@index([id])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String
  githubRepo  String
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  teamId      String    @unique
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  comments    comment[]

  @@index([teamId])
}

model comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    String
  ProjectId String
  parentId  String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project   @relation(fields: [ProjectId], references: [id], onDelete: Cascade)
  parent   comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children comment[] @relation("comment_children")

  @@index([ProjectId])
}

model Team {
  id          String    @id @default(cuid())
  creatorId   String?
  creatorRole roleName?

  creator User?     @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  Project Project[]
  Role    Role[]

  @@index([id])
}

model Role {
  id        String     @id @default(cuid())
  roleName  roleName
  stack     String
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  UserRole  UserRole[]
  Request   Request[]
  Course    Course[]

  @@unique([roleName, teamId])
  @@index([teamId])
}

model Request {
  id         String   @id @default(cuid())
  userEmail  String
  user       User     @relation(fields: [userEmail], references: [id])
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model UserRole {
  roleId    String
  role      Role    @relation(fields: [roleId], references: [id])
  userEmail String
  user      User    @relation(fields: [userEmail], references: [id])
  isAdmin   Boolean @default(false)

  @@unique([roleId, userEmail])
  @@index([userEmail])
}

model TimeSpent {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  time      String
  updatedAt DateTime @updatedAt
  createdAt DateTime

  @@unique([createdAt, userId])
}

model UserAnswer {
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  flashcardId  Int
  flashcard    Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  languageName String
  language     Language     @relation(fields: [languageName], references: [languageName], onDelete: Cascade)
  response     userResponse
  easeFactor   Float
  interval     Float
  lastReviewed DateTime     @updatedAt
  createdAt    DateTime     @default(now())

  @@unique([flashcardId, userId])
}

model Flashcard {
  id           Int          @id @default(autoincrement())
  languageName String
  language     Language     @relation(fields: [languageName], references: [languageName], onDelete: Cascade)
  answer       String
  question     String
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  UserAnswer   UserAnswer[]
}

model Language {
  languageName   String           @unique
  UserAnswer     UserAnswer[]
  Flashcard      Flashcard[]
  LanguageCourse LanguageCourse[]
}

model Course {
  id             String           @id @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  roleId         String
  role           Role             @relation(fields: [roleId], references: [id])
  isAccepted     DateTime
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  LanguageCourse LanguageCourse[]
  Interaction    Interaction[]
}

model LanguageCourse {
  languageName String
  language     Language @relation(fields: [languageName], references: [languageName])
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id])

  @@unique([courseId])
}

model Interaction {
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  visitorId String
  visitor   User     @relation(fields: [visitorId], references: [id])
  liked     Boolean  @default(false)
  playCount Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@unique([courseId])
}

model VerificationToken {
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
